{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport zeros from '@stdlib/array-base-zeros';\nimport getShape from '@stdlib/ndarray-shape';\nimport numel from '@stdlib/ndarray-base-numel';\nimport slice from '@stdlib/ndarray-base-slice';\nimport { assign as nextCartesianIndex } from '@stdlib/ndarray-base-next-cartesian-index';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns `[index, matrix]` pairs for each matrix in a stack of matrices.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least three dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerMatrixEntries( x );\n*\n* var v = iter.next().value;\n* // returns [...]\n*\n* var idx = v[ 0 ];\n* // returns [ 0, null, null ]\n*\n* var mat = ndarray2array( v[ 1 ] );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns [...]\n*\n* idx = v[ 0 ];\n* // returns [ 1, null, null ]\n*\n* mat = ndarray2array( v[ 1 ] );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerMatrixEntries( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S2;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( '1lP4f', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1lP2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( '1lP2o', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( '1lPF4' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 3 ) {\n\t\tthrow new TypeError( format('1lPFA') );\n\t}\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of matrices across all stacks of matrices:\n\tN /= shape[ ndims-1 ] * shape[ ndims-2 ];\n\tdim = ndims - 3;\n\tS2 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Set the last two elements to `null` to indicate that we want a full \"slice\" for the last two dimensions:\n\tidx[ ndims-1 ] = null;\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar indices;\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Cache the current state of the index array:\n\t\tindices = idx.slice();\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S2;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the matrices in the current stack, move on to the next set of matrices:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-1, idx );\n\t\t}\n\t\t// Return the next matrix entry:\n\t\treturn {\n\t\t\t'value': [ indices, slice( x, s, true, opts.writable ) ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerMatrixEntries( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerMatrixEntries;\n"],"names":["nditerMatrixEntries","x","options","shape","ndims","opts","iter","FLG","idx","dim","S2","N","i","isndarrayLike","TypeError","format","writable","arguments","length","isPlainObject","hasOwnProp","isBoolean","readonly","isReadOnly","Error","getShape","numel","zeros","setReadOnly","indices","s","j","done","slice","args2multislice","nextCartesianIndex","value","iteratorSymbol"],"mappings":";;q3CAkFA,SAASA,EAAqBC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeZ,GACpB,MAAM,IAAIa,UAAWC,EAAQ,QAASd,IAKvC,GAHAI,EAAO,CACNW,UAAY,GAERC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNjB,EAAUe,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,QAASb,IAEvC,GAAKkB,EAAYlB,EAAS,YAAe,CACxC,IAAMmB,EAAWnB,EAAQoB,UACxB,MAAM,IAAIR,UAAWC,EAAQ,QAAS,WAAYb,EAAQoB,WAG3D,GADAjB,EAAKW,UAAYd,EAAQoB,SACpBjB,EAAKW,UAAYO,EAAYtB,GACjC,MAAM,IAAIuB,MAAOT,EAAQ,SAE1B,CACD,CAMD,IAHAX,GADAD,EAAQsB,EAAUxB,IACJiB,QAGD,EACZ,MAAM,IAAIJ,UAAWC,EAAO,UAgC7B,OA3BW,KADXJ,EAAIe,EAAOvB,MAEVI,GAAM,GAGPI,GAAKR,EAAOC,EAAM,GAAMD,EAAOC,EAAM,GAErCM,EAAKP,EADLM,EAAML,EAAQ,GAIdQ,GAAK,GAGLJ,EAAMmB,EAAOvB,IAGRA,EAAM,GAAM,KACjBI,EAAKJ,EAAM,GAAM,KAIjBwB,EADAtB,EAAO,CAAA,EACY,QAenB,WACC,IAAIuB,EACAC,EACAC,EAEJ,GADAnB,GAAK,EACAL,GAAOK,GAAKD,EAChB,MAAO,CACNqB,MAAQ,GAIVH,EAAUrB,EAAIyB,QAGdH,EAAII,EAAiB1B,GAGrBuB,GAAMvB,EAAKC,GAAQ,GAAMC,EACzBF,EAAKC,GAAQsB,EACF,IAANA,IAEJvB,EAAM2B,EAAoBhC,EAAO,YAAaK,EAAKC,EAAI,EAAGD,IAG3D,MAAO,CACN4B,MAAS,CAAEP,EAASI,EAAOhC,EAAG6B,GAAG,EAAMzB,EAAKW,WAC5CgB,MAAQ,EAET,IA1CDJ,EAAatB,EAAM,UAmDnB,SAAc8B,GAEb,GADA7B,GAAM,EACDU,UAAUC,OACd,MAAO,CACNkB,MAASA,EACTJ,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA3DIK,GACJT,EAAatB,EAAM+B,GAkEpB,WACC,OAAOrC,EAAqBC,EAAGI,EAC/B,IAlEMC,CAmER"}